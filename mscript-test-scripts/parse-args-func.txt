{
	$ argument_specs = \
	list \
	( \
		index \
		( \
			"flag", "-i", \
			"long-flag", "--input", \
			"description", "An input", \
			"takes", true, \
			"required", true \
		) \
	)
	$ parsed1 = parseArgs(list(), argument_specs)	
	> "8a. ERROR: Missing required flag not caught!"
	! err
		> "8a. Caught error"
	}
	
	$ parsed2 = parseArgs(list("-i", "foo"), argument_specs)
	? not parsed2.has("-i")
		> "8b. ERROR: Specified required flag not found!"
	}
	> "8b. Should be foo: " + parsed2.get("-i")
}

>

{
	$ arguments = list("-n", "10")
	$ argument_specs = list(index("flag", "-n", "long-flag", "--number", "description", "A number", "takes", true, "numeric", true))
	$ parsed = parseArgs(arguments, argument_specs)
	> "7a. Should be: " + parsed.string()
}
{
	$ arguments = list("-n", "foo")
	$ argument_specs = list(index("flag", "-n", "long-flag", "--number", "description", "A number", "takes", true, "numeric", true))
	$ parsed = parseArgs(arguments, argument_specs)
	* error("Non-numeric argument should have been caught")
	! err
		> "7b. Error caught"
	}
}
{
	$ arguments = list("-n")
	$ argument_specs = list(index("flag", "-n", "long-flag", "--number", "description", "A number", "takes", true, "numeric", true, "default", 5))
	$ parsed = parseArgs(arguments, argument_specs)
	> "7c. Should be: " + parsed.string()
}

{
	$ arguments = list("-?", "--suppress-help-quit")
	$ argument_specs = list(index("flag", "-n", "long-flag", "--number", "description", "A number", "takes", true, "numeric", true, "default", 5, "required", true))
	$ parsed = parseArgs(arguments, argument_specs)
	> "7d. Should be: " + parsed.string()
}

>

{
	$ arguments = list("-i", "foo", "bar", "--help", "--suppress-help-quit")
	$ argument_specs = list(index("flag", "-i", "long-flag", "--input", "description", "Input file", "takes", true))
	$ parsed = parseArgs(arguments, argument_specs)
	> "6. Should be: " + parsed.string()
}

>

{
	$ arguments = list("-i", "foo")
	$ argument_specs = list(index("flag", "-i", "long-flag", "--input", "description", "Input file", "takes", true))
	$ parsed = parseArgs(arguments, argument_specs)
	> "5a. Should be: " + parsed.string()
}
{
	$ arguments = list("-i")
	$ argument_specs = list(index("flag", "-i", "long-flag", "--input", "description", "Input file", "takes", true))
	$ parsed = parseArgs(arguments, argument_specs)
	* error("Missing argument should have been caught")
	! err
		> "5b. Error caught"
	}
}

>

{
	$ arguments = list("-q")
	$ argument_specs = list(index("flag", "-q", "long-flag", "--quiet", "description", "Suppress program output"))
	$ parsed = parseArgs(arguments, argument_specs)
	> "4a. Should be: " + parsed.string()
}
{
	$ arguments = list("--quiet")
	$ argument_specs = list(index("flag", "-q", "long-flag", "--quiet", "description", "Suppress program output"))
	$ parsed = parseArgs(arguments, argument_specs)
	> "4b. Should be: " + parsed.string()
}

>

{
	$ arguments = list("-?", "--suppress-help-quit")
	$ argument_specs = list()
	$ parsed = parseArgs(arguments, argument_specs)
	> "3. Should be: " + parsed.string()
}

>

{
	$ arguments = list("foo", "bar")
	$ argument_specs = list()
	$ parsed = parseArgs(arguments, argument_specs)
	> "2. Should be: " + parsed.string()
}

>

{
	$ arguments = list()
	$ argument_specs = list()
	$ parsed = parseArgs(arguments, argument_specs)
	> "1a. Should be: " + parsed.string()
}
{
	$ arguments = list("foo", "bar")
	$ argument_specs = list()
	$ parsed = parseArgs(arguments, argument_specs)
	> "1b. Should be: " + parsed.string()
}
{
	$ arguments = list("-?", "--suppress-help-quit")
	$ argument_specs = list()
	$ parsed = parseArgs(arguments, argument_specs)
	> "1c. Should be: " + parsed.string()
}

===

8a. Caught error
8b. Should be foo: foo

7a. Should be: {: [], -?: false, -n: 10}
7b. Error caught
7c. Should be: {: [], -?: false, -n: 5}
7d. Should be: {: [], -?: true, -n: 5}

6. Should be: {: [bar], -?: true, -i: foo}

5a. Should be: {: [], -?: false, -i: foo}
5b. Error caught

4a. Should be: {: [], -?: false, -q: true}
4b. Should be: {: [], -?: false, -q: true}

3. Should be: {: [], -?: true}

2. Should be: {: [foo, bar], -?: false}

1a. Should be: {: [], -?: false}
1b. Should be: {: [foo, bar], -?: false}
1c. Should be: {: [], -?: true}
