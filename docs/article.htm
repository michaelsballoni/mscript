Title: mscript: a programming language for scripting cmd line operations
One-Line: Replace your .bat files with mscripts for cleaner and more powerful scripting
Abstract:
mscript is a programming language with general functionality, simple syntax, and cmd line automation built in.

<h2>Introduction</h2>
<p>mscript was initially designed as a teaching language.  That didn't work out.</p>
<p>
So I set out to make mscript useful to people who know how to code, people who are interested in scripting cmd line operations, and people who for whatever reason are not interested in powershell or python.  The thinking is, here's a simple scripting language, if it can solve your problem, then there's no need to get a bigger gun.
</p>
<p>
Initially written in C#, and with all sorts of HTML, IDE, server..stuff...I took a machete to it, ported it to C++, and made it internally and externally sensible.  You get a lot of bang for your buck with this 300 KB EXE, and no external dependencies.  Just put it in your path and have at it!
</p>

<h2>The mscript Language</h2>
<p>
Here is a tiny glance at mscript:
</p>
<pre>
...caching fib and loop to call it...
</pre>
<p>
It is line-based, pseudo-object-oriented, and uses symbols instead of keywords.
</p>

In mscript, every variable contains an object (think .NET Object), and and an object can be one of six types of things:
<ol>
<li>null</li>
<li>number (double)</li>
<li>string (std::wstring)</li>
<li>bool</li>
<li>list (std::vector&lt;object&gt;)<li>
<li>index (std::map&lt;object, object&gt;)<li>
</ol>

Here are the different statement types:
<pre>
/* a block
comment
*/

! a single-line comment, on its own line

> "print the value of an expression, like this string"

>> print exaclty what is on this line, allowing for "quotes"

{>>
every line
in "here"
is printed "as-is"
>>}

! Declare a variable with an optional initial value
! With no initial value, the variable has the null value
$ new_variable = "initial value"

! A variable assignment
! Once a variable has a non-null value, the variable cannot be assigned
! to a value of another type
! So mscript is somewhat dynamic typed
&amp; new_variable = "some other value"

! The O signifies an unbounded loop, a while(true) type of thing
! All loops end in a closing curly brace, but do not start with an opening one
O
	...
	! the V statement is break
	> "gotta get out!"
	V
}

! If, else if, else
! No curly braces at ends of if's and else if's, 
! just at the end of the overall statement
? some_number = 12
	&amp; some_number = 13
? some_number = 15
	&amp; some_number = 16
&lt;&gt;
	&amp; some_number = -1
}

! A foreach loop
! list(1, 2, 3) creates a new list with the given items
! This statements processes each list item, printing them out
! Note the string promotion in the print line
@ item : list(1, 2, 3)
	> "Item: " + item
}

! An indexing loop
! Notice the pseudo-OOP of the my_list. calls
! These are actually syntactic sugar for calls to global functions
! length(my_list) and get(my_list, idx)
$ my_list = list(1, 2, 3)
# idx : 0 -> my_list.length() - 1
	> "Item: " + my_list.get(idx)
}

{
	! Just a little block statement for keeping scopes separate
	! Variables declared in here...
}
! ...are not visible out here

! Functions are declared like other statements
~ my_function (param1, param2)
	! do something with param1 and param2

	! Function return values...
	! ...with a value
	&lt;- 15
	! ...without a value
	&lt;-
}

! A little loop example
~ counter(low_value, high_value
	$ cur_value = low_value
	$ counted = list()
	O
		! Use the * statement to execute a statement discarding any return value
		! Useful for requiring deliberate ignoring of return values
		* counted.add(cur_value)
		&amp; cur_value = cur_value + 1
		? cur_value &gt; high_value
			! Use the V statement to leave the loop
			V
		<>
			! Use the ^ statement to go back up to the stop of the loop, a continue statement
			^
		}
	}
	&lt;- counted
}

! Load and run another script here, an import statement
! The script path is an expression, so you can dynamically load different things
! Scripts are loaded relative to the script they are imported from
+ "some_other_script.ms"

</pre>

At its core is a piece of code that invokes a cmd line program, and gets its output and exit code:

<pre>
...
</pre>

There are only a few statements in the language:

<pre>
...
</pre>

